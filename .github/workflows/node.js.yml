#Copy from https://github.com/Zhang12334/Node-OBA-Fix/blob/master/.github/workflows/release.yml
name: "构建 - Release"

on:
  push:
    tags:
      - 'v*.*.*'  # 推送标签时触发

jobs:
  build-full-install-zip:
    name: "构建 - 全量安装包"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            artifact_name: "RMPR-linux-x64.tar.xz"

          - os: ubuntu-24.04-arm
            artifact_name: "RMPR-linux-arm64.tar.xz"  

          - os: macos-13
            artifact_name: "RMPR-macos-x64.tar.xz"

          - os: macos-14
            artifact_name: "RMPR-macos-arm64.tar.xz"            

          - os: windows-latest
            artifact_name: "RMPR-windows-x64.tar.gz"

    runs-on: ${{ matrix.os }}
    steps:
      - name: "获取源代码"
        uses: actions/checkout@v4

      - name: "设置 Node.js 编译环境"
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: "安装依赖"
        run: npm i --no-package-lock

      ## Linux & MacOS
      - name: "复制 Node.js 和运行脚本"
        run: |
          cp $(which node) .
          cp run/run.sh .
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')

      - name: "打包为 tar.xz 文件"
        run: |
          tar -caf ${{ matrix.artifact_name }} src lib package.json node_modules node run.sh
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')


      ## Windows
      - name: "复制 Node.js 和运行脚本"
        run: |
          $SRC = (Get-Command node.exe).Path
          copy $SRC node.exe
          copy run/run.bat .
        if: matrix.os == 'windows-latest'

      - name: "打包为 tar.gz 文件"
        run: |
          tar -caf ${{ matrix.artifact_name }} src lib package.json node_modules node.exe run.bat
        if: matrix.os == 'windows-latest'        

      - name: "上传文件"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}         


  upload-to-release:
    name: "打包 - 上传至 Release"
    runs-on: ubuntu-latest
    needs: [build-full-install-zip, build-update-zip]
    steps:
      - name: "获取源代码"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的仓库历史     

      - name: "设置 Node.js 编译环境"
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: "下载构建文件"
        uses: actions/download-artifact@v4
        
      - name: "重新打包 Linux X64"
        run: |
          cd RMPR-linux-x64.tar.xz
          zip -r ../RMPR-linux-x64.tar.xz.zip *
          cd ..
  
      - name: "重新打包 Linux Arm64"
        run: |
          cd RMPR-linux-arm64.tar.xz
          zip -r ../RMPR-linux-arm64.tar.xz.zip *
          cd ..

      - name: "重新打包 MacOS X64"
        run: |
          cd RMPR-macos-x64.tar.xz
          zip -r ../RMPR-macos-x64.tar.xz.zip *
          cd ..
  
      - name: "重新打包 MacOS Arm64"
        run: |
          cd RMPR-macos-arm64.tar.xz
          zip -r ../RMPR-macos-arm64.tar.xz.zip *
          cd ..
  
      - name: "重新打包 Windows X64"
        run: |
          cd RMPR-windows-x64.tar.gz
          zip -r ../RMPR-windows-x64.tar.gz.zip *
          cd ..

      - name: "上传至 Release"
        uses: softprops/action-gh-release@v1
        with:
          files: |
            RMPR-linux-x64.tar.xz.zip
            RMPR-linux-arm64.tar.xz.zip          
            RMPR-macos-x64.tar.xz.zip
            RMPR-macos-arm64.tar.xz.zip
            RMPR-windows-x64.tar.gz.zip 